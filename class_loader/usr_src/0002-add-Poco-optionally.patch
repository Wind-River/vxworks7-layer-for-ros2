From 91a6c7c9fccd9c7b1f11e53b3cc7fc75376d785b Mon Sep 17 00:00:00 2001
From: Andrei Kholodnyi <andrei.kholodnyi@gmail.com>
Date: Tue, 7 Apr 2020 22:39:58 +0200
Subject: [PATCH 2/2] add Poco optionally

---
 CMakeLists.txt                             |  9 +++-
 class_loader-extras.cmake                  |  4 +-
 include/class_loader/class_loader_core.hpp |  8 +++
 src/class_loader.cpp                       |  5 +-
 src/class_loader_core.cpp                  | 62 +++++++++++++++++++---
 5 files changed, 74 insertions(+), 14 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e731007..eb053a6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -18,10 +18,15 @@ endif()
 
 find_package(console_bridge_vendor REQUIRED) # Provides console_bridge 0.4.0 on platforms without it.
 find_package(console_bridge REQUIRED)
-find_package(poco_vendor REQUIRED)  # Provides FindPoco.cmake and Poco on platforms without it.
-find_package(Poco REQUIRED COMPONENTS Foundation)
+#find_package(poco_vendor QUIET)  # Provides FindPoco.cmake and Poco on platforms without it.
+#find_package(Poco COMPONENTS Foundation)
 link_directories(${Poco_LIBRARY_DIR})
 
+if(Poco_FOUND)
+  target_compile_definitions(${PROJECT_NAME}
+	  PRIVATE "CLASS_LOADER_USE_POCO")
+endif()
+
 if(ament_cmake_FOUND)
   ament_export_dependencies(console_bridge)
   ament_export_include_directories(include)
diff --git a/class_loader-extras.cmake b/class_loader-extras.cmake
index 4567b32..cd862ba 100644
--- a/class_loader-extras.cmake
+++ b/class_loader-extras.cmake
@@ -1,5 +1,5 @@
 include("${class_loader_DIR}/class_loader_hide_library_symbols.cmake")
 
-find_package(poco_vendor REQUIRED)
-find_package(Poco REQUIRED COMPONENTS Foundation)
+#find_package(poco_vendor QUIET)
+#find_package(Poco COMPONENTS Foundation)
 list(APPEND class_loader_LIBRARIES ${Poco_LIBRARIES})
diff --git a/include/class_loader/class_loader_core.hpp b/include/class_loader/class_loader_core.hpp
index 6d214e0..8c2ec66 100644
--- a/include/class_loader/class_loader_core.hpp
+++ b/include/class_loader/class_loader_core.hpp
@@ -57,7 +57,11 @@
 #include "class_loader/visibility_control.hpp"
 
 // Forward declaration to avoid including poco headers directly.
+#ifdef CLASS_LOADER_USE_POCO
 namespace Poco
+#else
+namespace shared_library
+#endif
 {
 
 class SharedLibrary;
@@ -82,7 +86,11 @@ typedef std::string ClassName;
 typedef std::string BaseClassName;
 typedef std::map<ClassName, impl::AbstractMetaObjectBase *> FactoryMap;
 typedef std::map<BaseClassName, FactoryMap> BaseToFactoryMapMap;
+#ifdef CLASS_LOADER_USE_POCO
 typedef std::pair<LibraryPath, Poco::SharedLibrary *> LibraryPair;
+#else
+typedef std::pair<LibraryPath, shared_library::SharedLibrary *> LibraryPair;
+#endif
 typedef std::vector<LibraryPair> LibraryVector;
 typedef std::vector<AbstractMetaObjectBase *> MetaObjectVector;
 
diff --git a/src/class_loader.cpp b/src/class_loader.cpp
index 50cf4e2..4d2cb89 100644
--- a/src/class_loader.cpp
+++ b/src/class_loader.cpp
@@ -29,8 +29,9 @@
 
 #include "class_loader/class_loader.hpp"
 
+#ifdef CLASS_LOADER_USE_POCO
 #include <Poco/SharedLibrary.h>
-
+#endif
 #include <string>
 
 namespace class_loader
@@ -68,7 +69,7 @@ std::string systemLibrarySuffix()
 #elif _WIN32
   return ".dll";
 #else
-  return Poco::SharedLibrary::suffix();
+  return ".so";
 #endif
 }
 
diff --git a/src/class_loader_core.cpp b/src/class_loader_core.cpp
index 75e2d6e..7670e7e 100644
--- a/src/class_loader_core.cpp
+++ b/src/class_loader_core.cpp
@@ -29,9 +29,11 @@
 
 #include "class_loader/class_loader_core.hpp"
 #include "class_loader/class_loader.hpp"
-
+#ifdef CLASS_LOADER_USE_POCO
 #include <Poco/SharedLibrary.h>
-
+#else
+#include <class_loader/SharedLibrary.h>
+#endif
 #include <cassert>
 #include <cstddef>
 #include <string>
@@ -443,7 +445,11 @@ void loadLibrary(const std::string & library_path, ClassLoader * loader)
     return;
   }
 
+#ifdef CLASS_LOADER_USE_POCO
   Poco::SharedLibrary * library_handle = nullptr;
+#else
+  shared_library::SharedLibrary * library_handle = nullptr;
+#endif
   static std::recursive_mutex loader_mutex;
 
   {
@@ -452,22 +458,50 @@ void loadLibrary(const std::string & library_path, ClassLoader * loader)
     try {
       setCurrentlyActiveClassLoader(loader);
       setCurrentlyLoadingLibraryName(library_path);
+#ifdef CLASS_LOADER_USE_POCO
       library_handle = new Poco::SharedLibrary(library_path);
+#else
+      library_handle = new shared_library::SharedLibrary(library_path);
+#endif
+#ifdef CLASS_LOADER_USE_POCO
     } catch (const Poco::LibraryLoadException & e) {
+#else
+    } catch (const shared_library::LibraryLoadException & e) {
+#endif
       setCurrentlyLoadingLibraryName("");
       setCurrentlyActiveClassLoader(nullptr);
       throw class_loader::LibraryLoadException(
-              "Could not load library (Poco exception = " + std::string(e.message()) + ")");
+#ifdef CLASS_LOADER_USE_POCO
+              "Could not load library (LibraryLoadException exception = " + std::string(e.message()) + ")");
+#else
+              "Could not load library (LibraryLoadException exception = " + std::string(e.what()) + ")");
+#endif
+#ifdef CLASS_LOADER_USE_POCO
     } catch (const Poco::LibraryAlreadyLoadedException & e) {
+#else
+    } catch (const shared_library::LibraryAlreadyLoadedException & e) {
+#endif
       setCurrentlyLoadingLibraryName("");
       setCurrentlyActiveClassLoader(nullptr);
       throw class_loader::LibraryLoadException(
-              "Library already loaded (Poco exception = " + std::string(e.message()) + ")");
+#ifdef CLASS_LOADER_USE_POCO
+              "Library already loaded (LibraryLoadException exception = " + std::string(e.message()) + ")");
+#else
+              "Library already loaded (LibraryLoadException exception = " + std::string(e.what()) + ")");
+#endif
+#ifdef CLASS_LOADER_USE_POCO
     } catch (const Poco::NotFoundException & e) {
+#else
+    } catch (const shared_library::NotFoundException & e) {
+#endif
       setCurrentlyLoadingLibraryName("");
       setCurrentlyActiveClassLoader(nullptr);
       throw class_loader::LibraryLoadException(
-              "Library not found (Poco exception = " + std::string(e.message()) + ")");
+#ifdef CLASS_LOADER_USE_POCO
+              "Library not found (LibraryLoadException exception = " + std::string(e.message()) + ")");
+#else
+              "Library not found (LibraryLoadException exception = " + std::string(e.what()) + ")");
+#endif
     }
 
     setCurrentlyLoadingLibraryName("");
@@ -477,7 +511,7 @@ void loadLibrary(const std::string & library_path, ClassLoader * loader)
   assert(library_handle != nullptr);
   CONSOLE_BRIDGE_logDebug(
     "class_loader.impl: "
-    "Successfully loaded library %s into memory (Poco::SharedLibrary handle = %p).",
+    "Successfully loaded library %s into memory (SharedLibrary handle = %p).",
     library_path.c_str(), reinterpret_cast<void *>(library_handle));
 
   // Graveyard scenario
@@ -528,7 +562,11 @@ void unloadLibrary(const std::string & library_path, ClassLoader * loader)
     LibraryVector & open_libraries = getLoadedLibraryVector();
     LibraryVector::iterator itr = findLoadedLibrary(library_path);
     if (itr != open_libraries.end()) {
+#ifdef CLASS_LOADER_USE_POCO
       Poco::SharedLibrary * library = itr->second;
+#else
+      shared_library::SharedLibrary * library = itr->second;
+#endif
       std::string library_path = itr->first;
       try {
         destroyMetaObjectsForLibrary(library_path, loader);
@@ -552,10 +590,18 @@ void unloadLibrary(const std::string & library_path, ClassLoader * loader)
             library_path.c_str());
         }
         return;
+#ifdef CLASS_LOADER_USE_POCO
       } catch (const Poco::RuntimeException & e) {
+#else
+      } catch (const shared_library::RuntimeException & e) {
+#endif
         delete (library);
         throw class_loader::LibraryUnloadException(
-                "Could not unload library (Poco exception = " + std::string(e.message()) + ")");
+#ifdef CLASS_LOADER_USE_POCO
+                "Could not unload library (LibraryUnloadException exception = " + std::string(e.message()) + ")");
+#else
+                "Could not unload library (LibraryUnloadException exception = " + std::string(e.what()) + ")");
+#endif
       }
     }
     throw class_loader::LibraryUnloadException(
@@ -578,7 +624,7 @@ void printDebugInfoToScreen()
   LibraryVector libs = getLoadedLibraryVector();
   for (size_t c = 0; c < libs.size(); c++) {
     printf(
-      "Open library %zu = %s (Poco SharedLibrary handle = %p)\n",
+      "Open library %zu = %s (SharedLibrary handle = %p)\n",
       c, (libs.at(c)).first.c_str(), reinterpret_cast<void *>((libs.at(c)).second));
   }
 
-- 
2.17.1

