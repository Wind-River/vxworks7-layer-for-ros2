diff --git a/composition/CMakeLists.txt b/composition/CMakeLists.txt
index 2b2ebca..a8e4a4f 100644
--- a/composition/CMakeLists.txt
+++ b/composition/CMakeLists.txt
@@ -20,6 +20,8 @@ find_package(rcutils REQUIRED)
 find_package(rosidl_cmake REQUIRED)
 find_package(rosidl_default_generators REQUIRED)
 find_package(std_msgs REQUIRED)
+find_package(libyaml_vendor REQUIRED)
+find_package(yaml REQUIRED)
 
 rosidl_generate_interfaces(${PROJECT_NAME}
   "srv/LoadNode.srv"
@@ -81,13 +83,16 @@ if(NOT WIN32)
     "${ament_cmake_package_templates_ENVIRONMENT_HOOK_LIBRARY_PATH}")
 endif()
 
+link_directories(${CMAKE_PREFIX_PATH}/lib)
+
 add_executable(manual_composition
   src/manual_composition.cpp)
 target_link_libraries(manual_composition
   talker_component
   listener_component
   server_component
-  client_component)
+  client_component
+  yaml)
 ament_target_dependencies(manual_composition
   "rclcpp")
 
@@ -104,20 +109,22 @@ if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
     ${libs}
     "-Wl,--as-needed")
 endif()
-target_link_libraries(linktime_composition ${libs})
+target_link_libraries(linktime_composition ${libs} yaml)
 ament_target_dependencies(linktime_composition
   "class_loader"
   "rclcpp")
 
 add_executable(dlopen_composition
   src/dlopen_composition.cpp)
+target_link_libraries(dlopen_composition yaml)
 ament_target_dependencies(dlopen_composition
   "class_loader"
-  "rclcpp")
+  "rclcpp"
+  "libyaml_vendor")
 
-add_executable(api_composition
+  add_executable(api_composition
   src/api_composition.cpp)
-target_link_libraries(api_composition ament_index_cpp::ament_index_cpp)
+target_link_libraries(api_composition ament_index_cpp::ament_index_cpp yaml)
 if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
   target_link_libraries(api_composition "stdc++fs")
 endif()
@@ -130,6 +137,7 @@ rosidl_target_interfaces(api_composition
 
 add_executable(api_composition_cli
   src/api_composition_cli.cpp)
+  target_link_libraries(api_composition_cli yaml)
 ament_target_dependencies(api_composition_cli
   "rclcpp")
 rosidl_target_interfaces(api_composition_cli
diff --git a/demo_nodes_cpp/CMakeLists.txt b/demo_nodes_cpp/CMakeLists.txt
index be24583..1621adb 100644
--- a/demo_nodes_cpp/CMakeLists.txt
+++ b/demo_nodes_cpp/CMakeLists.txt
@@ -17,6 +17,8 @@ find_package(rclcpp REQUIRED)
 find_package(rcutils)
 find_package(rmw REQUIRED)
 find_package(std_msgs REQUIRED)
+find_package(libyaml_vendor REQUIRED)
+find_package(yaml REQUIRED)
 
 function(custom_executable subfolder target)
   add_executable(${target} src/${subfolder}/${target}.cpp)
@@ -24,7 +26,8 @@ function(custom_executable subfolder target)
     "example_interfaces"
     "rclcpp"
     "rcutils"
-    "std_msgs")
+    "std_msgs"
+    "yaml")
   install(TARGETS ${target}
   DESTINATION lib/${PROJECT_NAME})
 endfunction()
diff --git a/demo_nodes_cpp_native/CMakeLists.txt b/demo_nodes_cpp_native/CMakeLists.txt
index 76b67d1..5e6d607 100644
--- a/demo_nodes_cpp_native/CMakeLists.txt
+++ b/demo_nodes_cpp_native/CMakeLists.txt
@@ -16,9 +16,14 @@ find_package(rclcpp REQUIRED)
 find_package(rmw REQUIRED)
 find_package(std_msgs REQUIRED)
 find_package(rmw_fastrtps_cpp QUIET)
+find_package(libyaml_vendor QUIET)
+find_package(yaml QUIET)
+
+link_directories(${CMAKE_PREFIX_PATH}/lib)
 
 function(custom_executable target)
   add_executable(${target} src/${target}.cpp)
+  target_link_libraries(${target} yaml)
   ament_target_dependencies(${target}
     "rclcpp"
     "std_msgs"
diff --git a/dummy_robot/dummy_map_server/CMakeLists.txt b/dummy_robot/dummy_map_server/CMakeLists.txt
index 83a6ecd..4cbc0d2 100644
--- a/dummy_robot/dummy_map_server/CMakeLists.txt
+++ b/dummy_robot/dummy_map_server/CMakeLists.txt
@@ -14,11 +14,16 @@ find_package(ament_cmake REQUIRED)
 find_package(nav_msgs REQUIRED)
 find_package(rclcpp REQUIRED)
 find_package(rmw REQUIRED)
+find_package(libyaml_vendor REQUIRED)
+find_package(yaml REQUIRED)
 
+link_directories(${CMAKE_PREFIX_PATH}/lib)
 add_executable(dummy_map_server src/dummy_map_server.cpp)
+target_link_libraries(dummy_map_server yaml)
 ament_target_dependencies(dummy_map_server
   "rclcpp"
   "nav_msgs"
+  "yaml"
 )
 
 install(TARGETS dummy_map_server
diff --git a/dummy_robot/dummy_sensors/CMakeLists.txt b/dummy_robot/dummy_sensors/CMakeLists.txt
index 22688ed..21beb0e 100644
--- a/dummy_robot/dummy_sensors/CMakeLists.txt
+++ b/dummy_robot/dummy_sensors/CMakeLists.txt
@@ -14,14 +14,20 @@ find_package(ament_cmake REQUIRED)
 find_package(rclcpp REQUIRED)
 find_package(rmw REQUIRED)
 find_package(sensor_msgs REQUIRED)
+find_package(libyaml_vendor REQUIRED)
+find_package(yaml REQUIRED)
+
+link_directories(${CMAKE_PREFIX_PATH}/lib)
 
 add_executable(dummy_laser src/dummy_laser.cpp)
+target_link_libraries(dummy_laser yaml)
 ament_target_dependencies(dummy_laser
   "rclcpp"
   "sensor_msgs"
 )
 
 add_executable(dummy_joint_states src/dummy_joint_states.cpp)
+target_link_libraries(dummy_joint_states yaml)
 ament_target_dependencies(dummy_joint_states
   "rclcpp"
   "sensor_msgs")
diff --git a/dummy_robot/dummy_sensors/src/dummy_laser.cpp b/dummy_robot/dummy_sensors/src/dummy_laser.cpp
index 2af6e1b..8b5b726 100644
--- a/dummy_robot/dummy_sensors/src/dummy_laser.cpp
+++ b/dummy_robot/dummy_sensors/src/dummy_laser.cpp
@@ -18,6 +18,10 @@
 #endif
 #endif
 
+#ifndef M_PI
+#define M_PI        3.14159265358979323846264338327950288   /* pi             */
+#endif
+
 #include <math.h>
 
 #include <chrono>
diff --git a/image_tools/CMakeLists.txt b/image_tools/CMakeLists.txt
index 266b5ff..b3ec02b 100644
--- a/image_tools/CMakeLists.txt
+++ b/image_tools/CMakeLists.txt
@@ -15,8 +15,10 @@ find_package(ament_cmake REQUIRED)
 find_package(rclcpp REQUIRED)
 find_package(sensor_msgs REQUIRED)
 find_package(std_msgs REQUIRED)
+find_package(libyaml_vendor REQUIRED)
+find_package(yaml REQUIRED)
 
-find_package(OpenCV REQUIRED)
+#find_package(OpenCV REQUIRED)
 
 include_directories(include)
 
@@ -29,7 +31,8 @@ ament_target_dependencies(cam2image
   "rclcpp"
   "sensor_msgs"
   "std_msgs"
-  "OpenCV")
+  "OpenCV"
+  "yaml")
 
 add_executable(showimage
   src/options.cpp
@@ -39,7 +42,8 @@ ament_target_dependencies(showimage
   "rclcpp"
   "sensor_msgs"
   "std_msgs"
-  "OpenCV")
+  "OpenCV"
+  "yaml")
 
 install(TARGETS
   cam2image
diff --git a/intra_process_demo/CMakeLists.txt b/intra_process_demo/CMakeLists.txt
index 4ad85fe..f07b1e2 100644
--- a/intra_process_demo/CMakeLists.txt
+++ b/intra_process_demo/CMakeLists.txt
@@ -16,8 +16,10 @@ find_package(rclcpp REQUIRED)
 find_package(rmw REQUIRED)
 find_package(sensor_msgs REQUIRED)
 find_package(std_msgs REQUIRED)
+find_package(libyaml_vendor REQUIRED)
+find_package(yaml REQUIRED)
 
-find_package(OpenCV REQUIRED)
+#find_package(OpenCV REQUIRED)
 
 include_directories(include)
 ament_export_include_directories(include)
@@ -31,14 +33,16 @@ add_executable(two_node_pipeline
   src/two_node_pipeline/two_node_pipeline.cpp)
 ament_target_dependencies(two_node_pipeline
   "rclcpp"
-  "std_msgs")
+  "std_msgs"
+  "yaml")
 
   # Simple example of a cyclic pipeline which uses no allocation while iterating.
 add_executable(cyclic_pipeline
   src/cyclic_pipeline/cyclic_pipeline.cpp)
 ament_target_dependencies(cyclic_pipeline
   "rclcpp"
-  "std_msgs")
+  "std_msgs"
+  "yaml")
 
 # A single program with one of each of the image pipeline demo nodes.
 add_executable(image_pipeline_all_in_one
@@ -46,7 +50,8 @@ add_executable(image_pipeline_all_in_one
 ament_target_dependencies(image_pipeline_all_in_one
   "rclcpp"
   "sensor_msgs"
-  "OpenCV")
+  "OpenCV"
+  "yaml")
 
 # A single program with one of each of the image pipeline demo nodes, but two image views.
 add_executable(image_pipeline_with_two_image_view
@@ -54,7 +59,8 @@ add_executable(image_pipeline_with_two_image_view
 ament_target_dependencies(image_pipeline_with_two_image_view
   "rclcpp"
   "sensor_msgs"
-  "OpenCV")
+  "OpenCV"
+  "yaml")
 
 # A stand alone node which produces images from a camera using OpenCV.
 add_executable(camera_node
@@ -62,7 +68,8 @@ add_executable(camera_node
 ament_target_dependencies(camera_node
   "rclcpp"
   "sensor_msgs"
-  "OpenCV")
+  "OpenCV"
+  "yaml")
 
 # A stand alone node which adds some text to an image using OpenCV before passing it along.
 add_executable(watermark_node
@@ -70,7 +77,8 @@ add_executable(watermark_node
 ament_target_dependencies(watermark_node
   "rclcpp"
   "sensor_msgs"
-  "OpenCV")
+  "OpenCV"
+  "yaml")
 
 # A stand alone node which consumes images and displays them using OpenCV.
 add_executable(image_view_node
@@ -78,7 +86,8 @@ add_executable(image_view_node
 ament_target_dependencies(image_view_node
   "rclcpp"
   "sensor_msgs"
-  "OpenCV")
+  "OpenCV"
+  "yaml")
 
 install(TARGETS
   two_node_pipeline
diff --git a/lifecycle/CMakeLists.txt b/lifecycle/CMakeLists.txt
index b13c405..5b72744 100644
--- a/lifecycle/CMakeLists.txt
+++ b/lifecycle/CMakeLists.txt
@@ -16,6 +16,8 @@ find_package(rclcpp_lifecycle REQUIRED)
 find_package(lifecycle_msgs REQUIRED)
 find_package(rclcpp REQUIRED)
 find_package(std_msgs REQUIRED)
+find_package(libyaml_vendor REQUIRED)
+find_package(yaml REQUIRED)
 
 include_directories(
   include
@@ -30,18 +32,21 @@ add_executable(lifecycle_talker
 target_link_libraries(lifecycle_talker
   ${rclcpp_lifecycle_LIBRARIES}
   ${std_msgs_LIBRARIES}
+  yaml
 )
 add_executable(lifecycle_listener
   src/lifecycle_listener.cpp)
 target_link_libraries(lifecycle_listener
   ${rclcpp_lifecycle_LIBRARIES}
   ${std_msgs_LIBRARIES}
+  yaml
 )
 add_executable(lifecycle_service_client
   src/lifecycle_service_client.cpp)
 target_link_libraries(lifecycle_service_client
   ${rclcpp_lifecycle_LIBRARIES}
   ${std_msgs_LIBRARIES}
+  yaml
 )
 
 install(TARGETS
diff --git a/logging_demo/CMakeLists.txt b/logging_demo/CMakeLists.txt
index 6de2c04..5d9d117 100644
--- a/logging_demo/CMakeLists.txt
+++ b/logging_demo/CMakeLists.txt
@@ -17,6 +17,8 @@ find_package(class_loader REQUIRED)
 find_package(rclcpp REQUIRED)
 find_package(rcutils REQUIRED)
 find_package(std_msgs REQUIRED)
+find_package(libyaml_vendor REQUIRED)
+find_package(yaml REQUIRED)
 
 find_package(rosidl_default_generators REQUIRED)
 rosidl_generate_interfaces(${PROJECT_NAME}
@@ -31,7 +33,8 @@ target_compile_definitions(logger_config_component
   PRIVATE "LOGGING_DEMO_BUILDING_DLL")
 ament_target_dependencies(logger_config_component
   "class_loader"
-  "rclcpp")
+  "rclcpp"
+  "yaml")
 rosidl_target_interfaces(logger_config_component
   ${PROJECT_NAME} "rosidl_typesupport_cpp")
 rclcpp_register_node_plugins(logger_config_component "logging_demo::LoggerConfig")
@@ -43,7 +46,8 @@ target_compile_definitions(logger_usage_component
 ament_target_dependencies(logger_usage_component
   "class_loader"
   "rclcpp"
-  "std_msgs")
+  "std_msgs"
+  "yaml")
 rclcpp_register_node_plugins(logger_usage_component "logging_demo::LoggerUsage")
 
 add_executable(logging_demo_main
@@ -52,7 +56,8 @@ target_link_libraries(logging_demo_main
   logger_config_component
   logger_usage_component)
 ament_target_dependencies(logging_demo_main
-  "rclcpp")
+  "rclcpp"
+  "yaml")
 
 install(TARGETS
   logger_config_component
diff --git a/pendulum_control/CMakeLists.txt b/pendulum_control/CMakeLists.txt
index b19a8f4..de12b40 100644
--- a/pendulum_control/CMakeLists.txt
+++ b/pendulum_control/CMakeLists.txt
@@ -22,6 +22,8 @@ find_package(rclcpp REQUIRED)
 find_package(pendulum_msgs REQUIRED)
 find_package(rttest)
 find_package(tlsf_cpp)
+find_package(libyaml_vendor)
+find_package(yaml)
 
 include_directories(include)
 
@@ -36,21 +38,24 @@ ament_target_dependencies(pendulum_demo${target_suffix}
   "pendulum_msgs"
   "rclcpp${target_suffix}"
   "rttest"
-  "tlsf_cpp")
+  "tlsf_cpp"
+  "yaml")
 
 add_executable(pendulum_logger${target_suffix}
   src/pendulum_logger.cpp)
 ament_target_dependencies(pendulum_logger${target_suffix}
   "pendulum_msgs"
   "rclcpp${target_suffix}"
-  "rttest")
+  "rttest"
+  "yaml")
 
 add_executable(pendulum_teleop${target_suffix}
   src/pendulum_teleop.cpp)
 ament_target_dependencies(pendulum_teleop${target_suffix}
   "pendulum_msgs"
   "rclcpp${target_suffix}"
-  "rttest")
+  "rttest"
+  "yaml")
 
 install(TARGETS
   pendulum_demo${target_suffix}
diff --git a/pendulum_control/src/pendulum_demo.cpp b/pendulum_control/src/pendulum_demo.cpp
index 3513518..7bd761e 100644
--- a/pendulum_control/src/pendulum_demo.cpp
+++ b/pendulum_control/src/pendulum_demo.cpp
@@ -12,8 +12,13 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-#include <execinfo.h>
+// #include <execinfo.h>
+#ifdef __VXWORKS__
+#include <stdlib.h>
+#include <pthread.h>
+#else
 #include <malloc.h>
+#endif
 #include <sys/mman.h>
 #include <sys/resource.h>
 #include <unistd.h>
@@ -43,7 +48,9 @@ static bool running = false;
 
 /// Declare a function pointer into which we will store the default malloc.
 static void * (* prev_malloc_hook)(size_t, const void *);
-
+#ifdef __VXWORKS__
+static void * (* __malloc_hook)(size_t, const void *);
+#endif
 // Use pragma to ignore a warning for using __malloc_hook, which is deprecated (but still awesome).
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
diff --git a/pendulum_control/src/pendulum_teleop.cpp b/pendulum_control/src/pendulum_teleop.cpp
index 60c35f2..c8d26c3 100644
--- a/pendulum_control/src/pendulum_teleop.cpp
+++ b/pendulum_control/src/pendulum_teleop.cpp
@@ -23,6 +23,10 @@
 
 #include "pendulum_msgs/msg/joint_command.hpp"
 
+#ifndef M_PI
+# define M_PI 3.141592653589793
+#endif
+
 using namespace std::chrono_literals;
 
 // Non real-time safe node for publishing a user-specified pendulum setpoint exactly once
