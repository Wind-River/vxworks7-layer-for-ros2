From b4e69d1b8ea4fec75a6d198c358bce740b0b72c1 Mon Sep 17 00:00:00 2001
From: Andrei Kholodnyi <andrei.kholodnyi@gmail.com>
Date: Wed, 24 Feb 2021 13:01:59 +0100
Subject: [PATCH] replace allocator with a default one

---
 rcl/src/rcl/client.c       |  3 +--
 rcl/src/rcl/publisher.c    |  3 +--
 rcl/src/rcl/remap.c        |  4 ++--
 rcl/src/rcl/service.c      |  3 +--
 rcl/src/rcl/subscription.c | 21 ++++++++++-----------
 5 files changed, 15 insertions(+), 19 deletions(-)

diff --git a/rcl/src/rcl/client.c b/rcl/src/rcl/client.c
index 8752363..4756e8b 100644
--- a/rcl/src/rcl/client.c
+++ b/rcl/src/rcl/client.c
@@ -76,9 +76,8 @@ rcl_client_init(
     return RCL_RET_ALREADY_INIT;
   }
   // Expand the given service name.
-  rcutils_allocator_t rcutils_allocator = *allocator;  // implicit conversion to rcutils version
   rcutils_string_map_t substitutions_map = rcutils_get_zero_initialized_string_map();
-  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_allocator);
+  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_get_default_allocator());
   if (rcutils_ret != RCUTILS_RET_OK) {
     RCL_SET_ERROR_MSG(rcutils_get_error_string().str);
     if (rcutils_ret == RCUTILS_RET_BAD_ALLOC) {
diff --git a/rcl/src/rcl/publisher.c b/rcl/src/rcl/publisher.c
index 59da94d..98a0b3e 100644
--- a/rcl/src/rcl/publisher.c
+++ b/rcl/src/rcl/publisher.c
@@ -80,9 +80,8 @@ rcl_publisher_init(
 
 
   // Expand the given topic name.
-  rcutils_allocator_t rcutils_allocator = *allocator;  // implicit conversion to rcutils version
   rcutils_string_map_t substitutions_map = rcutils_get_zero_initialized_string_map();
-  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_allocator);
+  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_get_default_allocator());
   if (rcutils_ret != RCUTILS_RET_OK) {
     RCL_SET_ERROR_MSG(rcutils_get_error_string().str);
     if (rcutils_ret == RCUTILS_RET_BAD_ALLOC) {
diff --git a/rcl/src/rcl/remap.c b/rcl/src/rcl/remap.c
index d8af63f..3fec157 100644
--- a/rcl/src/rcl/remap.c
+++ b/rcl/src/rcl/remap.c
@@ -239,7 +239,7 @@ rcl_remap_topic_name(
   RCL_CHECK_ARGUMENT_FOR_NULL(topic_name, RCL_RET_INVALID_ARGUMENT);
 
   rcutils_string_map_t substitutions = rcutils_get_zero_initialized_string_map();
-  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions, 0, allocator);
+  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions, 0, rcutils_get_default_allocator());
   rcl_ret_t ret = RCL_RET_ERROR;
   if (RCUTILS_RET_OK == rcutils_ret) {
     ret = rcl_get_default_topic_name_substitutions(&substitutions);
@@ -269,7 +269,7 @@ rcl_remap_service_name(
   RCL_CHECK_ARGUMENT_FOR_NULL(service_name, RCL_RET_INVALID_ARGUMENT);
 
   rcutils_string_map_t substitutions = rcutils_get_zero_initialized_string_map();
-  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions, 0, allocator);
+  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions, 0, rcutils_get_default_allocator());
   rcl_ret_t ret = RCL_RET_ERROR;
   if (rcutils_ret == RCUTILS_RET_OK) {
     ret = rcl_get_default_topic_name_substitutions(&substitutions);
diff --git a/rcl/src/rcl/service.c b/rcl/src/rcl/service.c
index 196e4aa..6692d21 100644
--- a/rcl/src/rcl/service.c
+++ b/rcl/src/rcl/service.c
@@ -80,9 +80,8 @@ rcl_service_init(
     return RCL_RET_ALREADY_INIT;
   }
   // Expand the given service name.
-  rcutils_allocator_t rcutils_allocator = *allocator;  // implicit conversion to rcutils version
   rcutils_string_map_t substitutions_map = rcutils_get_zero_initialized_string_map();
-  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_allocator);
+  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_get_default_allocator());
   if (rcutils_ret != RCUTILS_RET_OK) {
     RCL_SET_ERROR_MSG(rcutils_get_error_string().str);
     if (RCUTILS_RET_BAD_ALLOC == rcutils_ret) {
diff --git a/rcl/src/rcl/subscription.c b/rcl/src/rcl/subscription.c
index f3628b8..9f5f5b5 100644
--- a/rcl/src/rcl/subscription.c
+++ b/rcl/src/rcl/subscription.c
@@ -53,8 +53,8 @@ rcl_subscription_init(
 
   // Check options and allocator first, so the allocator can be used in errors.
   RCL_CHECK_ARGUMENT_FOR_NULL(options, RCL_RET_INVALID_ARGUMENT);
-  rcl_allocator_t * allocator = (rcl_allocator_t *)&options->allocator;
-  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
+  rcl_allocator_t allocator = rcl_get_default_allocator();
+  RCL_CHECK_ALLOCATOR_WITH_MSG(&allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
   RCL_CHECK_ARGUMENT_FOR_NULL(subscription, RCL_RET_INVALID_ARGUMENT);
   if (!rcl_node_is_valid(node)) {
     return RCL_RET_NODE_INVALID;  // error already set
@@ -68,9 +68,8 @@ rcl_subscription_init(
     return RCL_RET_ALREADY_INIT;
   }
   // Expand the given topic name.
-  rcutils_allocator_t rcutils_allocator = *allocator;  // implicit conversion to rcutils version
   rcutils_string_map_t substitutions_map = rcutils_get_zero_initialized_string_map();
-  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_allocator);
+  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_get_default_allocator());
   if (rcutils_ret != RCUTILS_RET_OK) {
     RCL_SET_ERROR_MSG(rcutils_get_error_string().str);
     if (RCUTILS_RET_BAD_ALLOC == rcutils_ret) {
@@ -100,7 +99,7 @@ rcl_subscription_init(
     rcl_node_get_name(node),
     rcl_node_get_namespace(node),
     &substitutions_map,
-    *allocator,
+    allocator,
     &expanded_topic_name);
   rcutils_ret = rcutils_string_map_fini(&substitutions_map);
   if (rcutils_ret != RCUTILS_RET_OK) {
@@ -129,7 +128,7 @@ rcl_subscription_init(
   }
   ret = rcl_remap_topic_name(
     &(node_options->arguments), global_args, expanded_topic_name,
-    rcl_node_get_name(node), rcl_node_get_namespace(node), *allocator, &remapped_topic_name);
+    rcl_node_get_name(node), rcl_node_get_namespace(node), allocator, &remapped_topic_name);
   if (RCL_RET_OK != ret) {
     goto fail;
   } else if (NULL == remapped_topic_name) {
@@ -151,8 +150,8 @@ rcl_subscription_init(
     goto cleanup;
   }
   // Allocate memory for the implementation struct.
-  subscription->impl = (rcl_subscription_impl_t *)allocator->allocate(
-    sizeof(rcl_subscription_impl_t), allocator->state);
+  subscription->impl = (rcl_subscription_impl_t *)allocator.allocate(
+    sizeof(rcl_subscription_impl_t), allocator.state);
   RCL_CHECK_FOR_NULL_WITH_MSG(
     subscription->impl, "allocating memory failed", ret = RCL_RET_BAD_ALLOC; goto cleanup);
   // Fill out the implemenation struct.
@@ -202,17 +201,17 @@ fail:
       }
     }
 
-    allocator->deallocate(subscription->impl, allocator->state);
+    allocator.deallocate(subscription->impl, allocator.state);
     subscription->impl = NULL;
   }
   ret = fail_ret;
   // Fall through to cleanup
 cleanup:
   if (NULL != expanded_topic_name) {
-    allocator->deallocate(expanded_topic_name, allocator->state);
+    allocator.deallocate(expanded_topic_name, allocator.state);
   }
   if (NULL != remapped_topic_name) {
-    allocator->deallocate(remapped_topic_name, allocator->state);
+    allocator.deallocate(remapped_topic_name, allocator.state);
   }
   return ret;
 }
-- 
2.25.1

