From 3fe1fde1c972874b5ffb823fccbc8845e360b3a6 Mon Sep 17 00:00:00 2001
From: Andrei Kholodnyi <andrei.kholodnyi@gmail.com>
Date: Tue, 7 Apr 2020 22:39:27 +0200
Subject: [PATCH 1/2] added SharedLibrary.h

---
 include/class_loader/SharedLibrary.h | 142 +++++++++++++++++++++++++++
 1 file changed, 142 insertions(+)
 create mode 100644 include/class_loader/SharedLibrary.h

diff --git a/include/class_loader/SharedLibrary.h b/include/class_loader/SharedLibrary.h
new file mode 100644
index 0000000..87f906f
--- /dev/null
+++ b/include/class_loader/SharedLibrary.h
@@ -0,0 +1,142 @@
+//
+// SharedLibrary.h
+//
+// Library: Foundation
+// Package: SharedLibrary
+// Module:  SharedLibrary
+//
+// Definition of the SharedLibraryImpl class for VxWorks.
+//
+// Copyright (c) 2004-2011, Applied Informatics Software Engineering GmbH.
+// and Contributors.
+//
+// SPDX-License-Identifier:	BSL-1.0
+//
+
+#ifndef CLASS_LOADER__SHARED_LIBRARY_H_
+#define CLASS_LOADER__SHARED_LIBRARY_H_
+
+#include <stdexcept>
+#include <dlfcn.h>
+
+namespace shared_library {
+
+class SharedLibraryException : public std::runtime_error
+{
+public:
+  explicit inline SharedLibraryException(const std::string & error_desc)
+  : std::runtime_error(error_desc)
+  {}
+};
+
+
+class LibraryLoadException : public SharedLibraryException
+{
+public:
+  explicit inline LibraryLoadException(const std::string & error_desc)
+  : SharedLibraryException(error_desc)
+  {}
+};
+
+class LibraryAlreadyLoadedException : public SharedLibraryException
+{
+public:
+  explicit inline LibraryAlreadyLoadedException(const std::string & error_desc)
+  : SharedLibraryException(error_desc)
+  {}
+};
+
+class NotFoundException : public SharedLibraryException
+{
+public:
+  explicit inline NotFoundException(const std::string & error_desc)
+  : SharedLibraryException(error_desc)
+  {}
+};
+
+class RuntimeException : public SharedLibraryException
+{
+public:
+  explicit inline RuntimeException(const std::string & error_desc)
+  : SharedLibraryException(error_desc)
+  {}
+};
+
+class SharedLibraryImpl
+{
+protected:
+	inline SharedLibraryImpl() {_handle = 0;};
+	inline ~SharedLibraryImpl() {};
+	inline void loadImpl(const std::string& path)
+	{
+		if (_handle) throw LibraryAlreadyLoadedException(path);
+		_handle = dlopen(path.c_str(), RTLD_GLOBAL);
+		if (!_handle)
+		{
+			const char* err = dlerror();
+			throw LibraryLoadException(err ? std::string(err) : path);
+		}
+		_path = path;
+	};
+	inline void unloadImpl()
+	{
+		if (_handle)
+		{
+			dlclose(_handle);
+			_handle = 0;
+		}
+	};
+	inline bool isLoadedImpl() const {return _handle != 0;};
+	inline void* findSymbolImpl(const std::string& name)
+	{
+		void* result = 0;
+		if (_handle)
+		{
+			result = dlsym(_handle, name.c_str());
+		}
+		return result;
+	}
+
+	// const std::string& getPathImpl() const;
+	// static std::string prefixImpl();
+	// static std::string suffixImpl();
+
+private:
+	std::string _path;
+	void* _handle;
+};
+
+class SharedLibrary: private SharedLibraryImpl
+{
+public:
+	inline SharedLibrary() {};
+	inline SharedLibrary(const std::string& path) {loadImpl(path);};
+	// SharedLibrary(const std::string& path, int flags);
+	inline virtual ~SharedLibrary() {};
+	// void load(const std::string& path);
+	// void load(const std::string& path, int flags);
+	inline void unload() {unloadImpl();};
+	inline bool isLoaded() const {return isLoadedImpl();};
+	inline bool hasSymbol(const std::string& name) {return findSymbolImpl(name) != 0;}
+	inline void* getSymbol(const std::string& name)
+	{
+		void* result = findSymbolImpl(name);
+		if (result)
+			return result;
+		else
+			throw NotFoundException(name);
+	}
+	// void* getSymbol(const std::string& name);
+	// const std::string& getPath() const;
+	// static std::string prefix();
+	// static std::string suffix();
+	// static std::string getOSName(const std::string& name);
+private:
+	SharedLibrary(const SharedLibrary&);
+	SharedLibrary& operator = (const SharedLibrary&);
+};
+
+} // namespace shared_library
+
+#endif // CLASS_LOADER__SHARED_LIBRARY_H_
+
-- 
2.17.1

