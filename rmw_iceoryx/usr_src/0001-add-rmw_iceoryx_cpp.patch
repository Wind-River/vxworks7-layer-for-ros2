From 4dcb4b430ab4e4383fde305245929106ef3ef6f3 Mon Sep 17 00:00:00 2001
From: Andrei Kholodnyi <andrei.kholodnyi@gmail.com>
Date: Sat, 27 Aug 2022 20:04:24 +0200
Subject: [PATCH] add rmw_iceoryx_cpp

---
 .../include/rmw_iceoryx_cpp/iceoryx_name_conversion.hpp     | 2 +-
 rmw_iceoryx_cpp/package.xml                                 | 1 -
 rmw_iceoryx_cpp/src/internal/iceoryx_generate_gid.cpp       | 6 ++++--
 rmw_iceoryx_cpp/src/rmw_publisher.cpp                       | 4 ++--
 rmw_iceoryx_cpp/src/rmw_subscription.cpp                    | 4 ++--
 5 files changed, 9 insertions(+), 8 deletions(-)

diff --git a/rmw_iceoryx_cpp/include/rmw_iceoryx_cpp/iceoryx_name_conversion.hpp b/rmw_iceoryx_cpp/include/rmw_iceoryx_cpp/iceoryx_name_conversion.hpp
index ddc8739..7abe16e 100644
--- a/rmw_iceoryx_cpp/include/rmw_iceoryx_cpp/iceoryx_name_conversion.hpp
+++ b/rmw_iceoryx_cpp/include/rmw_iceoryx_cpp/iceoryx_name_conversion.hpp
@@ -20,7 +20,7 @@
 #include <tuple>
 
 #include "iceoryx_posh/capro/service_description.hpp"
-#include "iceoryx_utils/cxx/string.hpp"
+#include "iceoryx_hoofs/cxx/string.hpp"
 
 struct rosidl_message_type_support_t;
 
diff --git a/rmw_iceoryx_cpp/package.xml b/rmw_iceoryx_cpp/package.xml
index e4f256e..9d4759c 100644
--- a/rmw_iceoryx_cpp/package.xml
+++ b/rmw_iceoryx_cpp/package.xml
@@ -13,7 +13,6 @@
   <depend>rcpputils</depend>
   <depend>rcutils</depend>
   <depend>rmw</depend>
-  <depend>rmw_implementation</depend>
   <depend>rosidl_runtime_c</depend>
   <depend>rosidl_runtime_cpp</depend>
   <depend>rosidl_typesupport_cpp</depend>
diff --git a/rmw_iceoryx_cpp/src/internal/iceoryx_generate_gid.cpp b/rmw_iceoryx_cpp/src/internal/iceoryx_generate_gid.cpp
index 3b1ea9d..f4d50f3 100644
--- a/rmw_iceoryx_cpp/src/internal/iceoryx_generate_gid.cpp
+++ b/rmw_iceoryx_cpp/src/internal/iceoryx_generate_gid.cpp
@@ -18,6 +18,8 @@
 #include "rmw/impl/cpp/macros.hpp"
 
 #include "iceoryx_posh/popo/untyped_publisher.hpp"
+#include "iceoryx_posh/iceoryx_posh_types.hpp"
+#include "iceoryx_posh/internal/popo/building_blocks/unique_port_id.hpp"
 
 rmw_gid_t generate_publisher_gid(iox::popo::UntypedPublisher * const publisher)
 {
@@ -25,8 +27,8 @@ rmw_gid_t generate_publisher_gid(iox::popo::UntypedPublisher * const publisher)
   gid.implementation_identifier = rmw_get_implementation_identifier();
   memset(gid.data, 0, RMW_GID_STORAGE_SIZE);
 
-  iox::UniquePortId typed_uid = publisher->getUid();
-  iox::UniquePortId::value_type uid = static_cast<iox::UniquePortId::value_type>(typed_uid);
+  iox::popo::UniquePortId typed_uid = publisher->getUid();
+  iox::popo::UniquePortId::value_type uid = static_cast<iox::popo::UniquePortId::value_type>(typed_uid);
   size_t size = sizeof(uid);
 
   if (!typed_uid.isValid() || size > RMW_GID_STORAGE_SIZE) {
diff --git a/rmw_iceoryx_cpp/src/rmw_publisher.cpp b/rmw_iceoryx_cpp/src/rmw_publisher.cpp
index 591806c..862e87f 100644
--- a/rmw_iceoryx_cpp/src/rmw_publisher.cpp
+++ b/rmw_iceoryx_cpp/src/rmw_publisher.cpp
@@ -131,7 +131,7 @@ fail:
   if (rmw_publisher) {
     if (iceoryx_sender) {
       RMW_TRY_DESTRUCTOR_FROM_WITHIN_FAILURE(
-        iceoryx_sender->~UntypedPublisherImpl(), iox::popo::UntypedPublisher)
+        iceoryx_sender->~UntypedPublisher(), iox::popo::UntypedPublisher)
       rmw_free(iceoryx_sender);
     }
     if (iceoryx_publisher) {
@@ -198,7 +198,7 @@ rmw_destroy_publisher(rmw_node_t * node, rmw_publisher_t * publisher)
   if (iceoryx_publisher) {
     if (iceoryx_publisher->iceoryx_sender_) {
       RMW_TRY_DESTRUCTOR(
-        iceoryx_publisher->iceoryx_sender_->~UntypedPublisherImpl(),
+        iceoryx_publisher->iceoryx_sender_->~UntypedPublisher(),
         iceoryx_publisher->iceoryx_sender_,
         result = RMW_RET_ERROR)
       rmw_free(iceoryx_publisher->iceoryx_sender_);
diff --git a/rmw_iceoryx_cpp/src/rmw_subscription.cpp b/rmw_iceoryx_cpp/src/rmw_subscription.cpp
index 11f30cc..d465f10 100644
--- a/rmw_iceoryx_cpp/src/rmw_subscription.cpp
+++ b/rmw_iceoryx_cpp/src/rmw_subscription.cpp
@@ -130,7 +130,7 @@ fail:
     if (iceoryx_receiver) {
       /// @todo Can we avoid to use the impl here?
       RMW_TRY_DESTRUCTOR_FROM_WITHIN_FAILURE(
-        iceoryx_receiver->~UntypedSubscriberImpl(), iox::popo::UntypedSubscriber)
+        iceoryx_receiver->~UntypedSubscriber(), iox::popo::UntypedSubscriber)
       rmw_free(iceoryx_receiver);
     }
     if (iceoryx_subscription) {
@@ -182,7 +182,7 @@ rmw_destroy_subscription(
     if (iceoryx_subscription->iceoryx_receiver_) {
       // @todo Can we avoid to use the impl here?
       RMW_TRY_DESTRUCTOR(
-        iceoryx_subscription->iceoryx_receiver_->~UntypedSubscriberImpl(),
+        iceoryx_subscription->iceoryx_receiver_->~UntypedSubscriber(),
         iceoryx_subscription->iceoryx_receiver_,
         result = RMW_RET_ERROR)
       rmw_free(iceoryx_subscription->iceoryx_receiver_);
-- 
2.34.1

